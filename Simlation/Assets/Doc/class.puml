@startuml
    class Graph {
        +Nodes:Dictionary<Vector2, Node>
        +Edges:SymmetricVectorDict<Edge>
    }
    
	class WorldGenerator {
	    +modifier:Modifier[]
	
		+Generate():World
		+WorldGenerator()
	}
	
	class TimeManager {
		+modifier:Modifier[]
		
		+TimeManager()
	}
	
    class Climate {
        +modifier:Modifier[]
        
        +Climate()
    }
	
    class World {
        #size:vector2
        #position:vector3
        -graph:Graph
        -timeHandler:TimeManager
        -objects:WorldObject[]
        -climateHandler:Climate
        -worldGenerator:WorldGenerator
        +World()
        -HandleAgents()
    }
	
	class WorldObject {
		#objectName:string
		#position:vector3
		#world:world

		+WorldObject()
	}
	
	
	Abstract class Agent {
        #behaviour:AgentBehaviour
        
        +Agent()
    }

	Abstract class AgentBehaviour {
		-TransitionalStateSystem:state[]
		
		+GetNextState():state
	}
    
    World *-up- Graph
	
	World *-down- WorldObject
	World *-up- TimeManager
	World *-- WorldGenerator
	World *-- Climate
	Agent *-- AgentBehaviour
	
	WorldObject <|-- Agent
@enduml